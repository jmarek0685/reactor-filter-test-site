{"version":3,"sources":["index.js"],"names":["MyComponent","props","onchange","e","setState","search","target","value","state","error","isLoaded","dogs","fetch","then","res","json","result","this","filtereddogs","filter","item","name","toLowerCase","indexOf","sort","a","b","localeCompare","message","icon","onChange","map","key","id","React","Component","ReactDOM","render","document","getElementById"],"mappings":"0QAIMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAiCRC,SAAW,SAAAC,GACT,EAAKC,SAAS,CAAEC,OAAQF,EAAEG,OAAOC,SAjCjC,EAAKC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,KAAM,GACTN,OAAQ,IANU,E,iFAaE,IAAD,OAClBO,MAAM,sDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKZ,SAAS,CACZM,UAAU,EACVC,KAAMK,EAAOL,UAIjB,SAACF,GACC,EAAKL,SAAS,CACZM,UAAU,EACVD,e,+BAWA,IAAD,EACkCQ,KAAKT,MAAvCC,EADA,EACAA,MAAOC,EADP,EACOA,SAAUC,EADjB,EACiBA,KAAMN,EADvB,EACuBA,OAIzBa,EAAeP,EAAKQ,QAAO,SAAAC,GAC9B,OAAkE,IAA3DA,EAAKC,KAAKC,cAAcC,QAAQlB,EAAOiB,kBAOhD,OAHAJ,EAAaM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEJ,KAAKM,cAAcD,EAAEL,SAG/CZ,EACK,uCAAaA,EAAMmB,SAChBlB,EAMZ,6BACG,gEADH,KAC8C,6BAC9C,kBAAC,IAAD,CAAOmB,KAAK,SAASC,SAAUb,KAAKf,WAChC,4BACGgB,EAAaa,KAAI,SAAAX,GAAI,OACpB,wBAAIY,IAAKZ,EAAKa,IACXb,EAAKC,WAXP,+C,GAvDaa,IAAMC,WA4EhCC,IAASC,OAAO,kBAACrC,EAAD,MAAiBsC,SAASC,eAAe,W","file":"static/js/main.c6ebfe01.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport {  Input } from \"mdbreact\";\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      dogs: [],\n\t  search: \"\"\n    };\n  }\n\n  //Fetch is where we do the API call to retrieve the data from a public API\n  //https://github.com/toddmotto/public-apis \n  //The heroku hosted rest service is calling \n  componentDidMount() {\n    fetch(\"http://polar-atoll-30396.herokuapp.com/v1/get-dogs\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            dogs: result.dogs\n          });\n        },\n\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n\n  onchange = e => {\n    this.setState({ search: e.target.value });\n  };\n\n  render() {\n   const { error, isLoaded, dogs, search } = this.state;\n   \n   //This does the filtering by comparing the user provided input of (search) and compares it with each breed name.\n   //It also converts both to lowercase first to allow for case neutral matching\n   const filtereddogs = dogs.filter(item => {\n      return item.name.toLowerCase().indexOf(search.toLowerCase()) !== -1;\n    });\n  \n    //Alphabetize the filtered dogs\n    filtereddogs.sort((a, b) => a.name.localeCompare(b.name));\n\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n  \n      //This is what will result as the JSX html output.\n      return (\n\t\t  <div>\n       <h1>Search from a list of dog breeds</h1>  <br/>\n\t\t  <Input icon=\"search\" onChange={this.onchange} />\n        <ul>\n          {filtereddogs.map(item => (\n            <li key={item.id}>\n              {item.name} \n            </li>\n          ))}\n        </ul>\n\t\t</div>\n      );\n    }\n  }\n}\n\nReactDOM.render(<MyComponent />, document.getElementById('root'));"],"sourceRoot":""}